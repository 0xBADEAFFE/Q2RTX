Netcode
-----------------

The following network protocols are supported by client and server sides:

* 34, final version of the original Quake2 protocol.
* 35, enhanced [R1Q2 protocol][r1q2].
* 36, enhanced Q2PRO protocol, extension of R1Q2 protocol.

Key features of Q2PRO protocol from technical perspective:

* Decoupled outgoing client packet rate, physics frame rate
  and rendering frame rate.
* Client is capable of sampling user input each frame but sending
  movement intentions in batches every few frames. This allows you
  to take advantage of high physics frame rate while keeping
  outgoing bandwidth adequate.
* Adjustable number of backup batches included in each client packet.
  Can be turned off completely for extra bandwidth savings
  over reliable connections.
* Server doesn't send player entity coordinates every frame as
  client regenerates them from playerstate. Dynamic lights and sounds
  associated with client entity no longer lag behind your locally
  predicted position.
* Server is able to filter gibs/footsteps on per-client basis.
* Netchan level packet fragmentation support with possible
  asynchronous delivery (i.e. fragments are sent with less then 100ms
  granularity which depends on client `rate` setting). No more frame
  overflows in mods with extremly high activity. Faster map load times
  due to the higher game state compression ratio, as all configstrings
  and baselines are compressed in single block.
* Per-key delta userinfo updates. E.g. if you often update your
  FOV setting, only a few bytes will be transmitted instead of
  the whole userinfo string.
* Ability to dynamically update client entity number.
  Needed for in-eyes chasecam mode to work properly
  (requires support from game DLL, only used by MVD subsystem for now).

[r1q2]: http://r-1.ch/r1q2-protocol.txt

Engine
-----------------

* OpenGL refresh library rewritten to perform reasonably well under
  open source [r300][] DRI driver for GNU/Linux systems.
* OpenGL refresh library supports JPG and PNG textures and
  MD3 models as a replacement for game media. Ability to take screenshots
  in JPG format.
* No `vid_restart` required to change video mode or game directory.
* List of video modes is configurable and no longer hard coded into engine.
* Enhanced, bash-style command line editing and autocompletion for
  many commands like `gamemap`, `demo`, `kick`, etc. Autocompletion
  works in system terminal too.
* Support for colored text in both graphical console and system terminal.
* Support for compressed PK2 files at virtual filesystem level.
* Beam based, configurable rail trail style.
* Ability to disable certain explosion and particle effects.
* Attempts to conform to [FHS][] and [Debian][] policy,
  designed to run shared between users on Unix.
* Client side demo playback with variable speed, freelook and
  ability to use custom FOV while watching.
* Ability to record while watching a demo.
* Separate UI module with graphical server and demo browsers included.
* Some more, yet to be documented.

[r300]: http://dri.freedesktop.org/wiki/R300
[fhs]: http://www.pathname.com/fhs/ "Filesystem Hierarchy Standard"
[debian]: http://www.debian.org/ "Debian -- The Universal Operating System"

MVD/GTV
-----------------
* Server side MVD recording and playback.
* Playback looks completely transparent to clients,
  no client modifications are required to watch.
* Live MVD stream broadcasting (aka GTV) over HTTP, with adjustable delay.
* Multiple channels may be broadcasted by single server node.
* Ability to play MVD directly from remote HTTP server without
  the need to manually download it.

