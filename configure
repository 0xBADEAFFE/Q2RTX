#!/bin/sh

# Copyright (C) 2008 Andrey Nazarov
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

# -----------------------------
# Q2PRO configuration script
# -----------------------------

# build directories
sources=$(dirname $0)
if [ "$sources" = "." ]; then
    sources=`pwd`
fi
if [ ! -f $sources/source/common.c ] ; then
    echo "$sources does not look like Q2PRO source tree!"
    exit 1
fi
if [ ! -f $sources/REVISION ] ; then
    echo "REVISION does not exist. Did you check Q2PRO out of SVN repository?"
    echo "You can create it by running 'svnversion > REVISION' at the root of source tree."
    exit 1
fi
version=$(cat $sources/REVISION)
revision=$(cat $sources/REVISION | tr -d -c [:digit:])
outdir=`pwd`
tmpc="/tmp/q2pro-${RANDOM}.c"
tmpo="/tmp/q2pro-${RANDOM}.o"
config_mk="config.mk"
config_h="config.h"

# defaults
help="no"
exesuffix=""
libsuffix=".so"
targets=""
executables=""
libraries=""
cpu=""
singleuser="no"
asmflags=""
mingw="no"
if [ -z "$CFLAGS" ]; then
    CFLAGS="-O2 -Wall -Wstrict-prototypes"
fi

# build tools
cross_prefix=""
cc="gcc"
make="make"
windres="windres"
strip="strip"
pngconfig="libpng-config"
sdlconfig="sdl-config"

# install paths
prefix="/usr/local"
datadir="share/games/quake2"
libdir="lib/games/quake2"
bindir="games"
mandir="share/man/man6"
homedir="~/.q2pro"
sitecfg="/etc/default/q2pro"

# use flags
use_dsound="no"
use_dinput="no"
use_zlib="yes"
use_tga="yes"
use_png="no"
use_jpg="no"
use_sdl="yes"
use_dl="no"
use_x11="yes"
use_client="yes"
use_ref="gl"
use_ui="yes"
use_server="no"
use_anticheat="no"
use_asm="???"
use_openffa="no"

# constants
logfile="console.log"
cfgfile="config.cfg"
defcfg="default.cfg"
autocfg="autoexec.cfg"
histfile=".conhistory"
democache=".democache"
screenshots="screenshots"
scoreshots="scoreshots"
gldriver="libGL.so.1"
indriver=""

#parse options
for opt do
    case $opt in
    --help|-h) help="yes"
    ;;
    --sources=*) sources=`echo $opt | cut -d '=' -f 2`
    ;;
    --prefix=*) prefix=`echo $opt | cut -d '=' -f 2`
    ;;
    --cross-prefix=*) cross_prefix=`echo $opt | cut -d '=' -f 2`
    ;;
    --enable-mingw) mingw="yes" ; sdl="no"
    ;;
    --cpu=*) cpu=`echo $opt | cut -d '=' -f 2`
    ;;
    --cc=*) cc=`echo $opt | cut -d '=' -f 2`
    ;;
    --make=*) make=`echo $opt | cut -d '=' -f 2`
    ;;
    --windres=*) windres=`echo $opt | cut -d '=' -f 2`
    ;;
    --strip=*) strip=`echo $opt | cut -d '=' -f 2`
    ;;
    --disable-client) use_client="no"
    ;;
    --enable-server) use_server="yes"
    ;;
    --enable-openffa) use_openffa="yes"
    ;;
    --enable-dsound) use_dsound="yes"
    ;;
    --enable-dinput) use_dinput="yes"
    ;;
    --disable-zlib) use_zlib="no"
    ;;
    --disable-tga) use_tga="no"
    ;;
    --enable-png) use_png="yes"
    ;;
    --enable-jpg) use_jpg="yes"
    ;;
    --disable-ui) use_ui="no"
    ;;
    --use-ref=*) use_ref=`echo $opt | cut -d '=' -f 2`
    ;;
    --disable-asm) use_asm="no"
    ;;
    --enable-anticheat) use_anticheat="yes"
    ;;
    --single-user) singleuser="yes"
    ;;
    --datadir=*) datadir=`echo $opt | cut -d '=' -f 2`
    ;;
    --libdir=*) libdir=`echo $opt | cut -d '=' -f 2`
    ;;
    --bindir=*) bindir=`echo $opt | cut -d '=' -f 2`
    ;;
    --mandir=*) mandir=`echo $opt | cut -d '=' -f 2`
    ;;
    --homedir=*) homedir=`echo $opt | cut -d '=' -f 2`
    ;;
    *) echo "Unknown option: $opt (try --help)" && exit 1
    ;;
    esac
done

if [ "$help" = "yes" ]; then
echo "Usage: $0 [options]"
echo ""
echo "Options:"
echo "  --help                 print this message"
echo "  --cross-prefix=PREFIX  add PREFIX to compile tools [$cross_prefix]"
echo "  --cc=CC                use C compiler [$cc]"
echo "  --make=MAKE            use MAKE processor [$make]"
echo "  --windres=WINDRES      use RC compiler [$windres]"
echo "  --disable-client       do not build client"
echo "  --enable-server        build dedicated server"
echo "  --enable-openffa       build OpenFFA deathmatch mod"
echo "  --enable-mingw         enable Windows build"
echo "  --enable-dsound        enable direct sound driver"
echo "  --enable-dinput        enable direct input driver"
echo "  --disable-zlib         disable linking with zlib"
echo "  --disable-tga          disable TGA images support"
echo "  --enable-png           enable PNG images support"
echo "  --enable-jpg           enable JPG images support"
echo "  --disable-ui           disable menu user interface"
echo "  --disable-asm          disable i386 assembly optimizations"
echo "  --enable-anticheat     enable r1ch.net anticheat server interface"
echo "  --single-user          assume to be installed in home dir"
echo "  --prefix=PREFIX        install in PREFIX [$prefix]"
echo "  --datadir=DIR          path to game data tree [$datadir]"
echo "  --libdir=DIR           path to game libs tree [$libdir]"
echo "  --bindir=DIR           executables directory [$bindir]"
echo "  --mandir=DIR           manpages directory [$mandir]"
echo "  --homedir=DIR          home directory [$homedir]"
echo ""
echo "Object files are built in the directory from which configure is run."
exit 1
fi

# detect host CPU
if [ -z "$cpu" ] ; then
    cpu=`uname -m`
fi
case $cpu in
i386|i486|i586|i686)
cpu="i386"
if [ "$use_asm" != "no" ] ; then
    use_asm="yes"
fi
CFLAGS="-ffloat-store -ffast-math $CFLAGS"
;;
ia64)
cpu="ia64"
;;
x86_64|amd64)
cpu="x86_64"
;;
arm*)
cpu="arm"
;;
*)
cpu="unknown"
;;
esac

# detect host OS
targetos=`uname -s`
case $targetos in
CYGWIN*)
mingw="yes"
CFLAGS="-mno-cygwin $CFLAGS"
;;
MINGW*)
mingw="yes"
;;
*BSD)
make="gmake"
;;
Linux)
use_dl="yes"
;;
esac

if [ "$mingw" = "yes" ]; then
    if [ "$cpu" = "i386" ]; then
        cpu="x86"
        targetos="Win32"
    else
        targetos="Win64"
    fi
    pathsep='\\'
    exesuffix=".exe"
    libsuffix=".dll"
    use_sdl="no"
    gldriver="opengl32"
    exported="__attribute__((dllexport))"
    homedir=""
    asmflags="-DUNDERSCORES"
    cfgfile="q2config.cfg"
    if [ -z "$LDFLAGS" ]; then
        LDFLAGS="-static"
    fi
else
    pathsep="/"
    exported="__attribute__((visibility(\"default\")))"

    if [ "$singleuser" = "yes" ]; then
        prefix=""
        datadir="."
        libdir="."
        bindir=""
        mandir=""
        homedir=""
    else
        if [ ! -z "$prefix" ]; then
            datadir="$prefix/$datadir"
            libdir="$prefix/$libdir"
            bindir="$prefix/$bindir"
            mandir="$prefix/$mandir"
        fi
    fi

# check if -fvisibility is supported
    echo "int main(){return 0;}" > $tmpc
    if $cc -o $tmpo -fvisibility\=hidden $tmpc 2>/dev/null ; then
        CFLAGS="-fvisibility=hidden $CFLAGS"
    fi
    rm -f $tmpc $tmpo

    LDFLAGS="-Wl,--no-undefined $LDFLAGS"
fi

gamelib="game$cpu$libsuffix"

vpath="\$(SRCDIR)/source"
if [ "$use_asm" = "yes" ]; then
    vpath="$vpath \$(SRCDIR)/asm"
fi

if [ ! -z "$cross_prefix" ]; then
    cc="$cross_prefix-$cc"
    windres="$cross_prefix-$windres"
    strip="$cross_prefix-$strip"
    pngconfig="$cross_prefix-$pngconfig"
fi

# echo configuration info
echo "Build client       $use_client"
echo "Build server       $use_server"
echo "Build OpenFFA      $use_openffa"
if [ "$mingw" = "no" ]; then
    if [ "$singleuser" = "yes" ]; then
        echo "Single user        $singleuser"
    else
        echo "Data directory     $datadir"
        echo "Game libraries     $libdir"
        echo "Binaries           $bindir"
        echo "Man pages          $mandir"
        echo "Home directory     $homedir"
    fi
fi
echo "zlib support       $use_zlib"
if [ "$use_client" = "yes" ]; then
    echo "Refresh type       $use_ref"
    echo "Direct input       $use_dinput"
    echo "Direct sound       $use_dsound"
    echo "TGA support        $use_tga"
    echo "JPG support        $use_jpg"
    echo "PNG support        $use_png"
    echo "UI support         $use_ui"
fi
test "$cpu" = "i386" && echo "i386 assembly      $use_asm"

CFLAGS="-I\$(OUTDIR) -MF \$*.d -MMD -pipe $CFLAGS -Wno-strict-aliasing"
#LDFLAGS="$LDFLAGS"


# determine what needs to be built
if [ "$use_client" = "yes" ]; then
    targets="$targets q2pro"
    executables="$executables q2pro$exesuffix"
else
    use_sdl="no"
fi

if [ "$use_server" = "yes" ]; then
    targets="$targets q2proded"
    executables="$executables q2proded$exesuffix"
fi

if [ "$use_openffa" = "yes" ]; then
    targets="$targets openffa"
    libraries="$libraries $gamelib"
fi


# build configuration files
echo "# Generated by configure - do not modify" > $config_mk
echo "// Generated by configure - do not modify" > $config_h

test "$mingw" = "yes" && echo "MINGW=$mingw" >> $config_mk
echo "CC=$cc" >> $config_mk
echo "WINDRES=$windres" >> $config_mk
echo "STRIP=$strip" >> $config_mk
echo "MAKE=$make" >> $config_mk
echo "SRCDIR=$sources" >> $config_mk
echo "OUTDIR=$outdir" >> $config_mk
echo "EXESUFFIX=$exesuffix" >> $config_mk
echo "LIBSUFFIX=$libsuffix" >> $config_mk
echo "#define LIBSUFFIX \"$libsuffix\"" >> $config_h
echo "VPATH=$vpath" >> $config_mk
echo "CFLAGS=$CFLAGS" >> $config_mk
echo "LDFLAGS=$LDFLAGS" >> $config_mk
test "$mingw" = "yes" && echo "RESFLAGS=-I\$(OUTDIR) -I\$(SRCDIR)/source" >> $config_mk
test "$use_asm" = "yes" && echo "ASMFLAGS=$asmflags" >> $config_mk

echo "TARGETS=$targets" >> $config_mk
echo "BINARIES=$executables $libraries" >> $config_mk
echo "EXECUTABLES=$executables" >> $config_mk
echo "LIBRARIES=$libraries" >> $config_mk

echo "REVISION=$revision" >> $config_mk
echo "#define REVISION $revision" >> $config_h
echo "#define VERSION \"r$version\"" >> $config_h

if [ "$mingw" = "no" ]; then
    echo "#define PRIz \"zu\"" >> $config_h

    echo "DATADIR=$datadir" >> $config_mk
    echo "#define DATADIR \"$datadir\"" >> $config_h

    echo "LIBDIR=$libdir" >> $config_mk
    echo "#define LIBDIR \"$libdir\"" >> $config_h

    echo "#define HOMEDIR \"$homedir\"" >> $config_h

    if [ "$singleuser" = "yes" ]; then
        echo "SINGLEUSER=$singleuser" >> $config_mk
    else
        echo "BINDIR=$bindir" >> $config_mk
        echo "MANDIR=$mandir" >> $config_mk
    fi
else
    echo "#define PRIz \"u\"" >> $config_h # FIXME: change this for x86_64
fi

echo "#define EXPORTED $exported" >> $config_h
echo "#define QDECL" >> $config_h

echo "GAMELIB=$gamelib" >> $config_mk
echo "#define GAMELIB \"$gamelib\"" >> $config_h

echo "#define COM_LOGFILE_NAME \"$logfile\"" >> $config_h
echo "#define COM_CONFIG_NAME \"$cfgfile\"" >> $config_h
echo "#define COM_DEFAULTCFG_NAME \"$defcfg\"" >> $config_h
echo "#define COM_AUTOEXECCFG_NAME \"$autocfg\"" >> $config_h
echo "#define COM_HISTORYFILE_NAME \"$histfile\"" >> $config_h
echo "#define COM_DEMOCACHE_NAME \"$democache\"" >> $config_h
echo "#define SCREENSHOTS_DIRECTORY \"$screenshots\"" >> $config_h
echo "#define SCORESHOTS_DIRECTORY \"$scoreshots\"" >> $config_h

test "$mingw" = "no" && echo "#define SYS_SITECFG_NAME \"$sitecfg\"" >> $config_h

echo "#define CPUSTRING \"$cpu\"" >> $config_h
echo "#define BUILDSTRING \"$targetos\"" >> $config_h

echo "#define PATH_SEP_CHAR '$pathsep'" >> $config_h
echo "#define PATH_SEP_STRING \"$pathsep\"" >> $config_h

if [ "$use_dl" = "yes" ]; then
    echo "USE_DL=yes" >> $config_mk
fi

if [ "$use_zlib" = "yes" ]; then
    echo "USE_ZLIB=yes" >> $config_mk
    echo "ZLIB_LDFLAGS=-lz" >> $config_mk
    echo "ZLIB_CFLAGS=" >> $config_mk
    echo "#define USE_ZLIB 1" >> $config_h
else
    echo "#define USE_ZLIB 0" >> $config_h
fi

if [ "$use_ref" != "no" ]; then
    echo "USE_REF=$use_ref" >> $config_mk
    echo "#define REF_SOFT 1" >> $config_h
    echo "#define REF_GL 2" >> $config_h
    if [ "$use_ref" = "gl" ]; then
        echo "#define DEFAULT_OPENGL_DRIVER \"$gldriver\"" >> $config_h
    fi
    echo "#define VID_REF \"$use_ref\"" >> $config_h
fi

if [ "$use_tga" = "yes" ]; then
    echo "#define USE_TGA 1" >> $config_h
fi

if [ "$use_png" = "yes" ]; then
    echo "USE_PNG=yes" >> $config_mk
    echo "PNG_LDFLAGS=$($pngconfig --libs)" >> $config_mk
    echo "PNG_CFLAGS=$($pngconfig --cflags)" >> $config_mk
    echo "#define USE_PNG 1" >> $config_h
fi

if [ "$use_jpg" = "yes" ]; then
    echo "USE_JPG=yes" >> $config_mk
    echo "JPG_LDFLAGS=-ljpeg" >> $config_mk
    echo "JPG_CFLAGS=" >> $config_mk
    echo "#define USE_JPG 1" >> $config_h
fi

if [ "$use_ui" = "yes" ]; then
    echo "USE_UI=yes" >> $config_mk
    echo "#define USE_UI 1" >> $config_h
fi

if [ "$use_sdl" = "yes" ]; then
    echo "USE_SDL=yes" >> $config_mk
    echo "SDL_LDFLAGS=$($sdlconfig --libs)" >> $config_mk
    echo "SDL_CFLAGS=$($sdlconfig --cflags)" >> $config_mk
    echo "#define USE_SDL 1" >> $config_h
    if [ "$use_x11" = "yes" ]; then
        echo "USE_X11=yes" >> $config_mk
        echo "X11_LDFLAGS=-lX11" >> $config_mk
        echo "X11_CFLAGS=" >> $config_mk
        echo "#define USE_X11 1" >> $config_h
    fi
fi

if [ "$use_dsound" = "yes" ]; then
    echo "USE_DSOUND=yes" >> $config_mk
    echo "#define USE_DSOUND 1" >> $config_h
fi

if [ "$use_dinput" = "yes" ]; then
    echo "USE_DINPUT=yes" >> $config_mk
    echo "#define USE_DINPUT 1" >> $config_h
fi

if [ "$use_asm" = "yes" ]; then
    echo "USE_ASM=yes" >> $config_mk
    echo "#define USE_ASM 1" >> $config_h
fi

if [ "$use_anticheat" = "yes" ]; then
    echo "USE_ANTICHEAT=yes" >> $config_mk
    echo "#define USE_ANTICHEAT 2" >> $config_h
fi

echo "#define USE_MAPCHECKSUM 1" >> $config_h
echo "#define USE_AUTOREPLY 1" >> $config_h

for t in $targets ; do
    mkdir -p .$t ;
done

